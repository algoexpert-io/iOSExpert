1.
import SwiftUI

struct MainTabView: View {
  var body: some View {
    TabView {
      BrowseBreedsView()
        .tabItem {
          Image(systemName: "pawprint.fill")
          Text("Browse")
        }

      SettingsView()
        .tabItem {
          Image(systemName: "gearshape.2.fill")
          Text("Settings")
        }
    }
  }
}

2.
import SwiftUI

struct BrowseBreedsView: View {
  var body: some View {
    Text("BrowseBreedsView")
  }
}

3.
import SwiftUI

struct SettingsView: View {
  var body: some View {
    Text("SettingsView")
  }
}

4.
import Observation

@Observable
class BrowseBreedsViewModel {
  enum State {
    case loading
    case loaded(breeds: [Breed])
    case error
  }

  var state = State.loading
  private let soundPlayer = SoundPlayer()

  func loadBreeds() async {
    state = .loading
    do {
      let breeds = try await BreedsLoader.loadBreeds()
      state = .loaded(breeds: breeds)
    } catch {
      state = .error
    }

    switch state {
    case .loading:
      break
    case .loaded(breeds: let breeds):
      if breeds.isEmpty {
        soundPlayer.play(.sadTrombone)
      } else {
        soundPlayer.play(.chime)
      }
    case .error:
      soundPlayer.play(.sadTrombone)
    }
  }
}

5.
import AVFoundation

class SoundPlayer {
  private var sounds: [String: AVAudioPlayer]
  private let soundExtension = "mp3"

  init () {
    sounds = [:]
  }

  func play(_ sound: Sound) {
    if sounds[sound.rawValue] == nil {
      if let audioURL = Bundle.main.url(forResource: sound.rawValue, withExtension: soundExtension) {
        try? sounds[sound.rawValue] = AVAudioPlayer.init(contentsOf: audioURL)
      }
    }

    if let retrievedSound = sounds[sound.rawValue] {
      retrievedSound.play()
    }
  }
}

6.
enum Sound: String {
  case chime
  case sadTrombone
}

7.
import SwiftUI

struct BrowseBreedsView: View {
  var viewModel = BrowseBreedsViewModel()

  var body: some View {
    NavigationStack {
      Group {
        switch viewModel.state {
        case .loading:
          ProgressView()
        case .error:
          Text("An error occurred during breed fetching.")
        case .loaded(let breeds):
          if !breeds.isEmpty {
            Text("Loading succeeded. First breed: \(breeds[0].name)")
          } else {
            Text("The endpoint returned an empty array of breeds.")
          }
        }
      }
      .navigationTitle("Cat Breeds")
    }
    .task {
      await viewModel.loadBreeds()
    }
  }
}

8.
throw NSError()

9.
return []

10.
import SwiftUI

struct ErrorRetryView: View {
  let message: String
  let viewModel: BrowseBreedsViewModel

  var body: some View {
    VStack {
      Text(message)
        .padding()

      Spacer()
        .frame(height: Layout.defaultSpacing)

      Button("Retry") {
        Task {
          await viewModel.loadBreeds()
        }
      }
    }
  }
}

11.
import UIKit

enum Layout {
  static let defaultSpacing: CGFloat = 8.0
  static let doubleDefaultSpacing: CGFloat = 16.0
  static let tripleDefaultSpacing: CGFloat = 24.0
}

12.
ErrorRetryView(message: "An error occurred during breed fetching.", viewModel: viewModel)

13.
ErrorRetryView(message: "The endpoint returned an empty array of breeds.", viewModel: viewModel)