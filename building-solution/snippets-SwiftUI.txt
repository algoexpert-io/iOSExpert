1.
import SwiftUI

struct MainTabView: View {
  var body: some View {
    TabView {
      BrowseBreedsView()
        .tabItem {
          Image(systemName: "pawprint.fill")
          Text("Browse")
        }

      SettingsView()
        .tabItem {
          Image(systemName: "gearshape.2.fill")
          Text("Settings")
        }
    }
  }
}

2.
import SwiftUI

struct BrowseBreedsView: View {
  var body: some View {
    Text("BrowseBreedsView")
  }
}

3.
import SwiftUI

struct SettingsView: View {
  var body: some View {
    Text("SettingsView")
  }
}

4.
import Observation

@Observable
class BrowseBreedsViewModel {
  enum State {
    case loading
    case loaded(breeds: [Breed])
    case error
  }

  var state = State.loading
  private static let soundPlayer = SoundPlayer()

  func loadBreeds() async {
    state = .loading
    do {
      let breeds = try await BreedsLoader.loadBreeds()
      state = .loaded(breeds: breeds)
    } catch {
      state = .error
    }

    switch state {
    case .loading:
      break
    case .loaded(breeds: let breeds):
      if breeds.isEmpty {
        BrowseBreedsViewModel.soundPlayer.play(.sadTrombone)
      } else {
        BrowseBreedsViewModel.soundPlayer.play(.chime)
      }
    case .error:
      BrowseBreedsViewModel.soundPlayer.play(.sadTrombone)
    }
  }
}

5.
import AVFoundation

class SoundPlayer {
  private var sounds: [String: AVAudioPlayer]
  private let soundExtension = "mp3"

  init () {
    sounds = [:]
  }

  func play(_ sound: Sound) {
    if sounds[sound.rawValue] == nil {
      if let audioURL = Bundle.main.url(forResource: sound.rawValue, withExtension: soundExtension) {
        try? sounds[sound.rawValue] = AVAudioPlayer.init(contentsOf: audioURL)
      }
    }

    if let retrievedSound = sounds[sound.rawValue] {
      retrievedSound.play()
    }
  }
}

6.
enum Sound: String {
  case chime
  case sadTrombone
}

7.
import SwiftUI

struct BrowseBreedsView: View {
  var viewModel = BrowseBreedsViewModel()

  var body: some View {
    NavigationStack {
      Group {
        switch viewModel.state {
        case .loading:
          ProgressView()
        case .error:
          Text("An error occurred during breed fetching.")
        case .loaded(let breeds):
          if !breeds.isEmpty {
            Text("Loading succeeded. First breed: \(breeds[0].name)")
          } else {
            Text("The endpoint returned an empty array of breeds.")
          }
        }
      }
      .navigationTitle("Cat Breeds")
    }
    .task {
      await viewModel.loadBreeds()
    }
  }
}

8.
state = .error

9.
state = .loaded(breeds: [])

10.
import SwiftUI

struct ErrorRetryView: View {
  let message: String
  let viewModel: BrowseBreedsViewModel

  var body: some View {
    VStack {
      Text(message)
        .padding()

      Spacer()
        .frame(height: Layout.standard)

      Button("Retry") {
        Task {
          await viewModel.loadBreeds()
        }
      }
    }
  }
}

11.
import UIKit

enum Layout {
  static let standard: CGFloat = 8.0
  static let doubleStandard: CGFloat = 16.0
  static let tripleStandard: CGFloat = 24.0
}

12.
ErrorRetryView(message: "An error occurred during breed fetching.", viewModel: viewModel)

13.
ErrorRetryView(message: "The endpoint returned an empty array of breeds.", viewModel: viewModel)

14.
import SwiftUI

struct BrowseBreedsView: View {
  var viewModel = BrowseBreedsViewModel()
  private let photoHeightWidth: CGFloat = 150

  var body: some View {
    NavigationStack {
      Group {
        switch viewModel.state {
        case .loading:
          ProgressView()
        case .error:
          ErrorRetryView(message: "An error occurred during breed fetching.", viewModel: viewModel)
        case .loaded(let breeds):
          if !breeds.isEmpty {
            list(of: breeds)
              .refreshable {
                await viewModel.loadBreeds()
              }
          } else {
            ErrorRetryView(message: "The endpoint returned an empty array of breeds.", viewModel: viewModel)
          }
        }
      }
      .navigationTitle("Cat Breeds")
    }
    .task {
      await viewModel.loadBreeds()
    }
  }

  func list(of breeds: [Breed]) -> some View {
    List(breeds) { breed in
      NavigationLink {
        Text(breed.description)
          .padding()
      } label: {
        HStack {
          VStack(alignment: .leading) {
            Text(breed.name)
              .font(.headline)
            Text(breed.knownFor)
            Text("Popularity: \(breed.popularity)")
          }

          Spacer()

          AsyncImage(url: breed.photoUrl) { image in
            image
              .resizable()
              .scaledToFill()
          } placeholder: {
              Image(systemName: "pawprint.fill")
                .resizable()
                .scaledToFit()
          }
        }
        .padding()
      }
    }
  }
}

15.
import Foundation

struct Breed: Decodable, Identifiable {
  var id: String { name }
  let name: String
  let knownFor: String
  let popularity: Int
  let photoUrl: URL
  let infoUrl: URL
  let credit: String
  let license: License
  let description: String
}

16.
import SwiftUI

struct BreedDetailsView: View {
  let breed: Breed
  @Environment(\.openURL) var openURL
  private let photoHeightWidth: CGFloat = 250.0

  var body: some View {
    VStack {
      AsyncImage(url: breed.photoUrl) { image in
        image
          .resizable()
          .scaledToFill()
      } placeholder: {
          Image(systemName: "pawprint.fill")
            .resizable()
            .scaledToFit()
      }
      .frame(width: photoHeightWidth, height: photoHeightWidth)

      ScrollView {
        Text(breed.description)
      }

      Spacer()

      Text("Photo Credit: \(breed.credit)")

      Spacer()

      HStack {
        Button("Show License") {
          openURL(breed.license.url)
        }

        Spacer()

        Button("View in Wikipedia") {
          openURL(breed.infoUrl)
        }
      }
    }
    .navigationTitle(breed.name)
    .padding()
  }
}

17.
BreedDetailsView(breed: breed)

18.
enum SortOrder: String, CaseIterable {
  case name
  case popularity

  var displayName: String {
    switch self {
    case .name:
      return "Name"
    case .popularity:
      return "Popularity"
    }
  }

  func compare(breed1: Breed, breed2: Breed) -> Bool {
    switch self {
    case .name:
      return breed1.name.caseInsensitiveCompare(breed2.name) == .orderedAscending
    case .popularity:
      return breed1.popularity < breed2.popularity
    }
  }
}

19.
import Observation

@Observable
class Settings {
  var sortOrder = SortOrder.name
}

let settings = Settings()

20.
import SwiftUI

struct SettingsView: View {
  @Bindable private var boundSettings = settings

  var body: some View {
    VStack {
      Text("Settings")
        .font(.largeTitle)

      Spacer()
        .frame(height: Layout.tripleStandard)

      Group {
        Text("Sort Order")
          .font(.title)

        Picker("", selection: $boundSettings.sortOrder) {
          ForEach(SortOrder.allCases, id: \.self) { sortOrder in
            Text(sortOrder.displayName).tag(sortOrder)
          }
        }
        .pickerStyle(SegmentedPickerStyle())
        .padding(.horizontal, Layout.doubleStandard)

        Text("This setting controls the sort order of breeds on KatFancy's breed-browsing screen.")
          .padding()
      }

      Spacer()
    }
  }
}

21.
var breeds = try await BreedsLoader.loadBreeds()
breeds.sort { breed1, breed2 in
  settings.sortOrder.compare(breed1: breed1, breed2: breed2)
}
