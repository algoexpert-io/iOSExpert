1.
import SwiftUI

struct MainTabView: View {
  var body: some View {
    TabView {
      BrowseBreedsView()
        .tabItem {
          Image(systemName: "pawprint.fill")
          Text("Browse")
        }

      SettingsView()
        .tabItem {
          Image(systemName: "gearshape.2.fill")
          Text("Settings")
        }
    }
  }
}

2.
import SwiftUI

struct BrowseBreedsView: View {
  var body: some View {
    Text("BrowseBreedsView")
  }
}

3.
import SwiftUI

struct SettingsView: View {
  var body: some View {
    Text("SettingsView")
  }
}

4.
import Observation

@Observable
class BrowseBreedsViewModel {
  enum State {
    case loading
    case loaded(breeds: [Breed])
    case error
  }

  var state = State.loading
  private let soundPlayer = SoundPlayer()

  func loadBreeds() async {
    state = .loading
    do {
      let breeds = try await BreedsLoader.loadBreeds()
      state = .loaded(breeds: breeds)
    } catch {
      state = .error
    }

    switch state {
    case .loading:
      break
    case .loaded(breeds: let breeds):
      if breeds.isEmpty {
        soundPlayer.play(.sadTrombone)
      } else {
        soundPlayer.play(.chime)
      }
    case .error:
      soundPlayer.play(.sadTrombone)
    }
  }
}

5.
import AVFoundation

class SoundPlayer {
  private var sounds: [String: AVAudioPlayer]
  private let soundExtension = "mp3"

  init () {
    sounds = [:]
  }

  func play(_ sound: Sound) {
    if sounds[sound.rawValue] == nil {
      if let audioURL = Bundle.main.url(forResource: sound.rawValue, withExtension: soundExtension) {
        try? sounds[sound.rawValue] = AVAudioPlayer.init(contentsOf: audioURL)
      }
    }

    if let retrievedSound = sounds[sound.rawValue] {
      retrievedSound.play()
    }
  }
}

6.
enum Sound: String {
  case chime
  case sadTrombone
}